#+TITLE: Ratish Punnoose's Emacs configuration
#+STARTUP: indent
#+STARTUP: hidestars

* Configuration
  Inspired by Sasha Chua's org mode base emacs configuration using
  org-babel. This is called from init.el. This is stored in a git
  repo in a local branch.  Note that this uses the [[http://eschulte.github.io/emacs24-starter-kit/][Emacs24 starter kit]].

#+begin_src emacs-lisp
;; Do not edit this file. This is autogenerated from the corresponding .org file.
#+end_src

* Useful tips
  Increase/Decrease font:   C-x C-+  / C-x C--

* Personal Information

* Undo effects of starter kit
** Remove on the fly spell checking
#+begin_src emacs-lisp
(remove-hook 'text-mode-hook 'turn-on-flyspell)
#+end_src

* Package Management

* Options
#+BEGIN_SRC emacs-lisp
;; Reload files automatically
(global-auto-revert-mode 1)

;; Use electric buffers
(global-set-key "\C-x\C-b" 'electric-buffer-list)

(define-key global-map "\M-g" 'goto-line)

#+END_SRC
* Appearance
** Font
Set default font to Consolas.  This is done using 
Options-> Save Options.
#+begin_src emacs-lisp
  ;;(set-default-font "-outline-Consolas-normal-normal-normal-mono-*-*-*-*-c-*-iso8859-1")
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(default ((t (:family "Consolas" :foundry "outline" :slant normal 
                  :weight normal :height 113 :width normal)))))
(global-font-lock-mode t)
#+end_src

** Window appearance
*** Colors
#+begin_src emacs-lisp
(setq default-frame-alist
      '((minibuffer . 1) 
         (menu-bar-lines . 1)
         (cursor-color .  "cyan")
         (foreground-color . "grey" )
         (background-color . "black")
         (mouse-color . "yellow" )))
#+end_src  
*** Color themes
To use a color theme. Use load-library and then color-theme.
Suitable color themes are aalto-dark, aalto-light,
color-theme-alice-blue, color-theme-andreas
*** Disable toolbar
#+begin_src emacs-lisp
(if window-system
    (tool-bar-mode -1)
)
#+end_src emacs-lisp

*** Title and Status [[http://mnemonikk.org/][mnemonikk]]
#+begin_src emacs-lisp
(setq frame-title-format
      '(buffer-file-name "%f"
                                 (dired-directory dired-directory "%b")))
(setq-default mode-line-buffer-identification
              (cons
               '(:eval (replace-regexp-in-string "^.*/\\(.*\\)/" "\\1/" default-directory))
               mode-line-buffer-identification))
(display-time)
(setq display-time-day-and-date t)
(setq line-number-mode t)
(setq column-number-mode t)
(setq next-line-add-newlines nil)
(setq blink-matching-paren t)
#+end_src
** Scroll Bars
   Add scroll bars
#+begin_src emacs-lisp
;;(setq scroll-bar-mode 1)
;;(toggle-scroll-bar)
#+end_src

* Navigation
Easier keys for switching windows

** For moving to next/previous window
#+begin_src emacs-lisp :tangle no
(defun select-next-window ()
  "Switch to the next window" 
  (interactive)
  (select-window (next-window)))

(defun select-previous-window ()
  "Switch to the previous window" 
  (interactive)
  (select-window (previous-window)))

(global-set-key (kbd "M-n") 'select-next-window)
(global-set-key (kbd "M-p")  'select-previous-window)


#+end_src
** For moving using arrows
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-<left>") 'windmove-left)          ; move to left windnow
(global-set-key (kbd "C-<right>") 'windmove-right)        ; move to right window
(global-set-key (kbd "C-<up>") 'windmove-up)              ; move to upper window
(global-set-key (kbd "C-<down>") 'windmove-down)          ; move to downer window
#+END_SRC
* Org-mode
** Setup before loading org
Loading it in this file does not work since org has to be started to
evaluate this file itself.

** Automatically added by starter kit.
- Speed commands: Use ? at beginning of headlines to see.
- Code block fontification

#+begin_src emacs-lisp 
(starter-kit-load "org")
#+end_src

** Org global configuration and shortcuts
#+begin_src emacs-lisp 
(set-time-zone-rule "GMT+7")
(setq org-directory "~/org")


(global-set-key "\C-cl" 'org-store-link)
;; Use C-c C-l to insert link
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

(setq org-hide-leading-stars t)

#+end_src
** Org capture
#+begin_src emacs-lisp :tangle yes
(setq  org-agenda-files (quote ("~/org/jnl.org")))
(setq  org-refile-targets '((org-agenda-files  :maxlevel . 3)))
(setq org-default-notes-file (concat org-directory "/jnl.org"))
(setq org-log-done 'time) ;; Record time of task completion
(setq org-clock-into-drawer 1) 
;; (setq org-log-done 'note) ;; Record time+note of task completion

;; C-c c     (org-capture) Call the command org-capture
;; C-c C-c     (org-capture-finalize)
;;      Once you have finished entering information into the capture buffer, 
;; C-c C-w (refile)
;; C-c C-k abort capture
;; C-u C-c c visit target of capture template
;; C-u C-u C-c c Visit last stored capture item in its buffer
;; C-0 + C-c c  capture at point in an org buffer
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/jnl.org" "Todolist")
             "* TODO %?\n  %iAdded: %U")
	      ("d" "Date" entry (file+datetree+prompt "~/org/jnl.org")
             "* %?")        
        ("j" "Journal" entry (file+datetree "~/org/jnl.org")
             "* %?\nAdded: %U\n  %i")
	      ("n" "NowAction" entry (file+datetree "~/org/jnl.org")
             "* %?" :clock-in t :clock-resume t)))

;; To define special keys to capture to a particular template without going through the interactive template selection, you can create your key binding like this:

(define-key global-map "\C-ct"
      (lambda () (interactive) (org-capture nil "t")))

#+end_src

** Org beamer
*** Emphasis lists are set before org is loaded. Currently this is set in [[file:init.el::(setq%20org-emphasis-alist][init.el]].
#+begin_src emacs-lisp :tangle no
  (setq org-emphasis-alist 
        (quote (("*" bold "<b>" "</b>") 
                ("/" italic "<i>" "</i>")
                ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
                ("=" org-code "<code>" "</code>" verbatim)
                ("~" org-verbatim "<code>" "</code>" verbatim)
                ("+" (:strike-through t) "<del>" "</del>")
                ("@" org-warning "<b>" "</b>")))
        org-export-latex-emphasis-alist 
        (quote (("*" "\\textbf{%s}" nil)
                ("/" "\\emph{%s}" nil) 
                ("_" "\\underline{%s}" nil)
                ("+" "\\texttt{%s}" nil)
                ("=" "\\verb=%s=" nil)
                ("~" "\\verb~%s~" t)
                ("@" "\\alert{%s}" nil)))
        )
  
#+end_src
*** Set code export to minted
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'ox-latex)
  (setq org-latex-listings 'minted)
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  
  (setq org-latex-minted-options
           '(("frame" "lines")
             ("fontsize" "\\scriptsize")
             ("linenos" "")))
#+END_SRC
*** Set language aliases
In versions < 8, this was not done rightaway. So a hook was needed.
#+BEGIN_SRC emacs-lisp :tangle no
    (add-hook 'org-export-before-processing-hook 
              '(lambda(backend) 
                 (add-to-list 'org-latex-minted-langs '(verilog "v"))  
                 ))
#+END_SRC
In version 8, this is simpler.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-minted-langs '(verilog "v"))    
#+END_SRC

** Org diff
Taken from [[http://lists.gnu.org/archive/html/emacs-orgmode/2013-04/msg00400.html][gnu archive]]. This turns expands everything before funning diff.
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'ediff-prepare-buffer-hook 'f-ediff-prepare-buffer-hook-setup)
  (defun f-ediff-prepare-buffer-hook-setup ()
    ;; specific modes
    (cond ((eq major-mode 'org-mode)
           (f-org-vis-mod-maximum))
          ;; room for more modes
          )
    ;; all modes
    (setq truncate-lines nil))
  (defun f-org-vis-mod-maximum ()
    "Visibility: Show the most possible."
    (cond
     ((eq major-mode 'org-mode)
      (visible-mode 1)  ; default 0
      (setq truncate-lines nil)  ; no `org-startup-truncated' in hook
      (setq org-hide-leading-stars t))  ; default nil
     (t
      (message "ERR: not in Org mode")
      (ding))))
#+END_SRC
My customization to allow folding and unfolding
#+BEGIN_SRC emacs-lisp
  ;; diff hooks for org mode
  (add-hook 'ediff-select-hook 'f-ediff-org-unfold-tree-element)
  (add-hook 'ediff-unselect-hook 'f-ediff-org-fold-tree)
  ;; Check for org mode and existence of buffer
  (defun f-ediff-org-showhide(buf command &rest cmdargs)
    "If buffer exists and is orgmode then execute command"
    (if buf
        (if (eq (buffer-local-value 'major-mode (get-buffer buf)) 'org-mode)
            (save-excursion (set-buffer buf) (apply command cmdargs)))
      )
    )
    
  (defun f-ediff-org-unfold-tree-element ()
    "Unfold tree at diff location"
    (f-ediff-org-showhide ediff-buffer-A 'org-reveal)  
    (f-ediff-org-showhide ediff-buffer-B 'org-reveal)  
    (f-ediff-org-showhide ediff-buffer-C 'org-reveal)  
    )
  ;;
  (defun f-ediff-org-fold-tree ()
    "Fold tree back to top level"
    (f-ediff-org-showhide ediff-buffer-A 'hide-sublevels 1)  
    (f-ediff-org-showhide ediff-buffer-B 'hide-sublevels 1)  
    (f-ediff-org-showhide ediff-buffer-C 'hide-sublevels 1)  
    )
#+END_SRC

* Cygwin and Windows
Cygwin + Windows: [[http://emacswiki.org/emacs/NTEmacsWithCygwin][Emacs with Cygwin]]

** Cygwin
Set the shell to use cygwin's bash, if Emacs finds it is running
under Windows and c:\cygwin exists.  Assumes that c:\cygwin\bin is
not already in the Windows path.
#+begin_src emacs-lisp
  (let* ((cygwin-root "c:/cygwin")
         (cygwin-bin (concat cygwin-root "/bin")))
    (when (and (eq 'windows-nt system-type) 
 	     (file-readable-p cygwin-root))
    
      (setq exec-path (cons cygwin-bin exec-path))
      (setenv "PATH" (concat cygwin-bin ";" (getenv "PATH")))
    
      ;; By default use the Windows HOME.
      ;; Otherwise, uncomment below to set a HOME
      ;;      (setenv "HOME" (concat cygwin-root "/home/eric"))
    
      ;; NT-emacs assumes a Windows shell. Change to baash.
      (setq shell-file-name "bash")
      (setenv "SHELL" shell-file-name) 
      (setq explicit-shell-file-name shell-file-name) 
    
      ;; This removes unsightly ^M characters that would otherwise
      ;; appear in the output of java applications.
      (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)))
#+end_src 

** Cygwin paths
#+begin_src emacs-lisp
  ;; Fix windows problems of trying to check file permissions
  ;; Causes emacs to stutter
  (setq w32-get-true-file-attributes nil)
  
  ;; Cygwin mount paths
  (require 'cygwin-mount)
  (cygwin-mount-activate)
#+end_src

** Line endings
On windows emacs uses dos line feeds. Fix this.
#+BEGIN_SRC emacs-lisp
(setq default-buffer-file-coding-system 'utf-8-unix)
#+END_SRC

** Slow startup time on disconnected machine
This is due to emacs not being able to obtain the hostname easily. To
solve this find the hosts file on Windows. For Windows 7 it is at
"c:\Windows\system32\drivers\etc".  Edit the hosts file and uncomment/add
the two lines below.
#+BEGIN_SRC 
127.0.0.1  localhost loopback
::1        localhost
#+END_SRC
* Testing
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message "dummy message")
#+END_SRC
* Not converted yet
:PROPERTIES:
:ORDERED:  t
:END:



;; Skip startup messages
;; (setq inhibit-startup-message t) ;; part of SK


(setq-default ispell-program-name "aspell")

	    
(setq version-control t)
(setq kept-old-versions 1)
(setq delete-old-versions t)
(setq track-eol t)
(setq search-highlight t)
(setq query-replace-highlight t)

;;(setq ps-print-color-p nil)
;; (show-paren-mode) ;; partk of SK
;;(setq auto-fill-mode 1)
;; (setq-default auto-fill-function 'do-auto-fill)
;; (auto-fill-mode t) ;; SK


(transient-mark-mode t)
(auto-compression-mode t)

(setq load-path (append load-path (list "/usr/local/emacs/lisp")))
(setq file-name-buffer-file-type-alist '(("\.bat$" . nil) (".*" . t)))
(global-set-key [f9] 'compile)


;; Compile
(global-set-key "\C-xm" 'compile)

;; Tags search
(global-set-key "\C-t" 'tags-search)


;; Use highlight symbol library for quick search for word under cursor
 ;; highlight symbol at point and jump to next automatically
(require 'highlight-symbol)
(setq highlight-symbol-on-navigation-p t)
(global-set-key (kbd "C-x *") 'highlight-symbol-next)
(global-set-key (kbd "C-*") 'highlight-symbol-prev)

;;
;; Toggle read-only status of a buffer C-x C-q 




;;(load "sample-setups/zephyr-setup")
;;(load "~/.zephyr-ssh")

(defun linux-c-mode ()
  (c-mode)
  (c-set-style "linux"))

;;============================GO ========================
(autoload 'go-mode "go-mode" "\
Major mode for editing Go source text.

This provides basic syntax highlighting for keywords, built-ins,
functions, and some types.  It also provides indentation that is
\(almost) identical to gofmt.

\(fn)" t nil)

(add-to-list 'auto-mode-alist (cons "\\.go$" #'go-mode))

(autoload 'gofmt "go-mode" "\
Pipe the current buffer through the external tool `gofmt`.
Replace the current buffer on success; display errors on failure.

\(fn)" t nil)

(autoload 'gofmt-before-save "go-mode" "\
Add this to .emacs to run gofmt on the current buffer when saving:
 (add-hook 'before-save-hook #'gofmt-before-save)

\(fn)" t nil)

;;;***

(provide 'go-mode-load)
;; ========================================================

(autoload 'java-mode "/usr/lib/emacs/site-lisp/java-mode" "java mode" t nil)

(autoload 'matlab-mode "matlab" "Matlab Mode" t)
(setq matlab-indent-function t)


(autoload 'matlab-shell "matlab" "Interactive Matlab mode." t)
(setq matlab-shell-command "/usr/local/bin/matlabShell")

(autoload 'php-mode "php-mode" "PHP Mode" t)

(autoload 'javascript-mode "javascript-mode" "JavaScript mode" t)

(autoload 'ruby-mode "ruby-mode" "Ruby Mode" t)
(setq ruby-indent-level 4)

(autoload 'promela-mode "promela-mode" "PROMELA mode" nil t)
(setq-default  promela-block-indent 8)
(setq-default promela-auto-match-delimiter nil)
(add-hook 'promela-mode-hook '(lambda ()
				( setq promela-auto-match-delimiter nil)
				))
(add-hook 'promela-mode-hook '(lambda ()
				( setq promela-block-indent 4)
				))

(autoload 'nusmv-mode "nusmv-mode" "NuSMV mode" nil t)

(autoload 'markdown-mode "markdown-mode" "Markdown major mode" t)


(setq auto-mode-alist
      (append '(("\\.C$"  . c++-mode)
		("\\.cc$" . c++-mode)
		("\\.hh$" . c++-mode)
		("\\.c$"  . c++-mode)
		("\\.h$"  . c++-mode)
		("\\.pov$"  . c++-mode)
		("\\.m$"  . matlab-mode)
		("\\.php$"  . php-mode)
		("\\.php3$"  . php-mode)
		("\\.rb$"  . ruby-mode)
		("\\.pml$"  . promela-mode)
		("\\.smv$"  . nusmv-mode)
		("\\.spin$"  . promela-mode)
		("\\.js$"  . javascript-mode)
		("\\.java$" . java-mode))
	      auto-mode-alist))
(add-hook 'c-mode-hook 'font-lock-mode)
(add-hook 'c++-mode-hook 'font-lock-mode)		
(add-hook 'c-mode-hook 'imenu-add-menubar-index)
(add-hook 'c++-mode-hook 'imenu-add-menubar-index)
(add-hook 'c-mode-hook '(lambda () (c-set-style "linux")))
(add-hook 'c++-mode-hook '(lambda () (c-set-style "linux")))
(add-hook 'objc-mode-hook '(lambda () (c-set-style "linux")))
(add-hook 'c-mode-hook 'hs-minor-mode)
(add-hook 'c++-mode-hook 'hs-minor-mode)		
(add-hook 'vhdl-mode-hook 'hs-minor-mode)		
(add-hook 'ruby-mode-hook 'hs-minor-mode)		

;; Invoke HideShow mode with M-x hs-minor-mode.
;; For Emacs 20:
;;    * C-c S show all
;;    * C-c H hide all
;;    * C-c s show block
;;    * C-c h hide block
;;
;; For Emacs 21:
;; 
;;    * C-c @ ESC C-s show all
;;    * C-c @ ESC C-h hide all
;;    * C-c @ C-s show block
;;    * C-c @ C-h hide block
;;    * C-c @ C-c toggle hide/show
;; http://www.emacswiki.org/cgi-bin/wiki/HideShow
;;http://www.gnu.org/software/emacs/manual/html_node/Hideshow.html#Hideshow
(setq hs-hide-comments-when-hiding-all t)

;;  Toggle hide/show
(global-set-key (kbd "C-,") 'hs-toggle-hiding)




;; ;;;;;;;;;;;; C, C++ customization
(setq ckeywords '("FILE" "\\sw+_t"  "u_\\sw*"
		  "_PRETTY_"))
(setq c-font-lock-extra-types ckeywords)
(setq c++-font-lock-extra-types ckeywords)



;; On windows set default font to Consolas

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Set the colors
;; http://www.geocities.com/kensanata/colors.html has a list of colors



(put 'upcase-region 'disabled nil)








